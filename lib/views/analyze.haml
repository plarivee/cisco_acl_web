!!! XML
!!!
%html
  %head
    %link(rel='stylesheet' type='text/css' href='/css/main.css')
    %meta(http-equiv="Content-Type" content="text/html; charset=UTF-8")
    %title Cisco ACL Analyzer Web
  %body
    :ruby
      def text_input_opts(name, size, placeholder, value_key)
        input_opts = {}
        input_opts[:type] = 'text'
        input_opts[:name] = name 
        input_opts[:size] = size
        input_opts[:placeholder] = placeholder
        if defined?(@search_opts) && @search_opts.key?(value_key) && @search_opts[value_key] != 'any'
          input_opts[:value] = @search_opts[value_key]
        end
        input_opts
      end
    :ruby
      def proto_select_opts(value)
        input_opts = { value: value }
        if defined?(@search_opts) && @search_opts[:protocol] == value
          input_opts[:selected] = 'selected'
        end
        input_opts
      end
      
    #body_top
      %h1
        %a(href="/")Cisco ACL Web
      
    #body_base
      %h2 Input ACL
      %form(action='/analyze' method='post' charser='utf-8')
        #acl_textarea
          %textarea(name='acls' placeholder='Input ACL')
            :preserve
              #{@raw_acls}
        #acl_match_conditions
          %p
            %ul
              %li
                In below conditions, If a textbox keep empty, it
                assumed 'any'.  (It can use token 'any' explicitly.)
              %li
                With Standard ACL, it is used to match source
                conditions.  When it specifies only destination
                conditions(specify 'source=ANY'), it matches all
                ACEs.
          %table#searchform
            %tr
              %td.desc
                Protocol:
              %td
                %select(name='protocol')
                  %option{proto_select_opts('ip')} ip
                  %option{proto_select_opts('icmp')} icmp
                  %option{proto_select_opts('tcp')} tcp
                  %option{proto_select_opts('udp')} udp
            %tr
              %td.desc
                Source IP:
              %td
                %input{text_input_opts('src_ip', 40, 'e.g. 192.168.0.0/24', :src_ip)}
            %tr
              %td.desc
                Source Protocol or Port Number:
              %td
                %input{text_input_opts('src_port', 40, 'e.g. 80', :src_port)}
            %tr
              %td.desc
                Destination IP:
              %td
                %input{text_input_opts('dst_ip', 40, 'e.g. 192.168.3.3', :dst_ip)}
            %tr
              %td.desc
                Destination Protocol or Port Number:
              %td
                %input{text_input_opts('dst_port', 40, 'e.g. any', :dst_port)}
        #acl_exec_analyze
          %input(type='submit' value='Analyze & search')
            
    #body_results
      - if defined?(@error_list) && !@error_list.empty?
        %h2 Errors in ACL
        #acl_error
          - @error_list.each do |each|
            %ul
              %li= each
      - if defined?(@acl_table)
        %h2 Parser Result
        - @acl_table.each do |name, acl|
          %h3= "ACL Name: #{name}"
          .acls
            %table.acls
              - if acl.named_acl?
                %tr
                  - count_init = 1
                  %td.count= count_init
                  %td.ace
                    %pre= acl.header_string
              - else
                - count_init = 0
              - acl.each_with_index do |ace, count|
                - errlist = []
                - begin
                  - matched = ace.matches?(@search_opts)
                - rescue => err
                  - puts "ERROR: #{err}, in #{ace}"
                  - errlist.push err
                %tr
                  - classstr = matched ? 'count_matched' : 'count'
                  %td(class='#{classstr}')= count + 1 + count_init
                  %td.ace
                    %pre= acl.line_string(ace).gsub(/^\s+/,'&nbsp;')
      - else
        %h2 ACL Sample
        #acl_sample
          %pre
            :preserve
              access-list 1 permit 192.168.0.0 0.0.255.255
              access-list 1 deny   any log
              !
              access-list 100 remark 6to4
              access-list 100 permit 41 any host 192.88.99.1
              access-list 100 permit ip any host 192.88.99.1
              access-list 100 remark others
              access-list 100 permit tcp any eq 0 any eq 0
              access-list 100 permit udp any eq 0 any eq 0
              access-list 100 deny   ip any any log
              !
              access-list 110 remark SPLIT_VPN
              access-list 110 permit ip 192.168.0.0 0.0.255.255 any
              !
              ip access-list extended FA8-OUT
               deny   udp any any eq bootpc
               deny   udp any any eq bootps
               permit tcp host 192.168.3.4 173.30.240.0 0.0.0.255 range 32768 65535
               deny udp 192.168.3.0 0.0.240.255 lt 1024 any eq 80
               remark network access-list remark!!
               permit tcp any any established
               deny tcp any any syn rst
               deny udp any any log-input hoge
               permit ip any any log
              !
            


